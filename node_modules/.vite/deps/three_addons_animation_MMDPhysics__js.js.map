{
  "version": 3,
  "sources": ["../../three/examples/jsm/animation/MMDPhysics.js"],
  "sourcesContent": ["import {\n\tBone,\n\tBoxGeometry,\n\tCapsuleGeometry,\n\tColor,\n\tEuler,\n\tMatrix4,\n\tMesh,\n\tMeshBasicMaterial,\n\tObject3D,\n\tQuaternion,\n\tSphereGeometry,\n\tVector3\n} from 'three';\n\n/**\n * Dependencies\n *  - Ammo.js https://github.com/kripken/ammo.js\n *\n * MMDPhysics calculates physics with Ammo(Bullet based JavaScript Physics engine)\n * for MMD model loaded by MMDLoader.\n *\n * TODO\n *  - Physics in Worker\n */\n\n/* global Ammo */\n\nclass MMDPhysics {\n\n\t/**\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Array<Object>} rigidBodyParams\n\t * @param {Array<Object>} (optional) constraintParams\n\t * @param {Object} params - (optional)\n\t * @param {Number} params.unitStep - Default is 1 / 65.\n\t * @param {Integer} params.maxStepNum - Default is 3.\n\t * @param {Vector3} params.gravity - Default is ( 0, - 9.8 * 10, 0 )\n\t */\n\tconstructor( mesh, rigidBodyParams, constraintParams = [], params = {} ) {\n\n\t\tif ( typeof Ammo === 'undefined' ) {\n\n\t\t\tthrow new Error( 'THREE.MMDPhysics: Import ammo.js https://github.com/kripken/ammo.js' );\n\n\t\t}\n\n\t\tthis.manager = new ResourceManager();\n\n\t\tthis.mesh = mesh;\n\n\t\t/*\n\t\t * I don't know why but 1/60 unitStep easily breaks models\n\t\t * so I set it 1/65 so far.\n\t\t * Don't set too small unitStep because\n\t\t * the smaller unitStep can make the performance worse.\n\t\t */\n\t\tthis.unitStep = ( params.unitStep !== undefined ) ? params.unitStep : 1 / 65;\n\t\tthis.maxStepNum = ( params.maxStepNum !== undefined ) ? params.maxStepNum : 3;\n\t\tthis.gravity = new Vector3( 0, - 9.8 * 10, 0 );\n\n\t\tif ( params.gravity !== undefined ) this.gravity.copy( params.gravity );\n\n\t\tthis.world = params.world !== undefined ? params.world : null; // experimental\n\n\t\tthis.bodies = [];\n\t\tthis.constraints = [];\n\n\t\tthis._init( mesh, rigidBodyParams, constraintParams );\n\n\t}\n\n\t/**\n\t * Advances Physics calculation and updates bones.\n\t *\n\t * @param {Number} delta - time in second\n\t * @return {MMDPhysics}\n\t */\n\tupdate( delta ) {\n\n\t\tconst manager = this.manager;\n\t\tconst mesh = this.mesh;\n\n\t\t// rigid bodies and constrains are for\n\t\t// mesh's world scale (1, 1, 1).\n\t\t// Convert to (1, 1, 1) if it isn't.\n\n\t\tlet isNonDefaultScale = false;\n\n\t\tconst position = manager.allocThreeVector3();\n\t\tconst quaternion = manager.allocThreeQuaternion();\n\t\tconst scale = manager.allocThreeVector3();\n\n\t\tmesh.matrixWorld.decompose( position, quaternion, scale );\n\n\t\tif ( scale.x !== 1 || scale.y !== 1 || scale.z !== 1 ) {\n\n\t\t\tisNonDefaultScale = true;\n\n\t\t}\n\n\t\tlet parent;\n\n\t\tif ( isNonDefaultScale ) {\n\n\t\t\tparent = mesh.parent;\n\n\t\t\tif ( parent !== null ) mesh.parent = null;\n\n\t\t\tscale.copy( this.mesh.scale );\n\n\t\t\tmesh.scale.set( 1, 1, 1 );\n\t\t\tmesh.updateMatrixWorld( true );\n\n\t\t}\n\n\t\t// calculate physics and update bones\n\n\t\tthis._updateRigidBodies();\n\t\tthis._stepSimulation( delta );\n\t\tthis._updateBones();\n\n\t\t// restore mesh if converted above\n\n\t\tif ( isNonDefaultScale ) {\n\n\t\t\tif ( parent !== null ) mesh.parent = parent;\n\n\t\t\tmesh.scale.copy( scale );\n\n\t\t}\n\n\t\tmanager.freeThreeVector3( scale );\n\t\tmanager.freeThreeQuaternion( quaternion );\n\t\tmanager.freeThreeVector3( position );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Resets rigid bodies transorm to current bone's.\n\t *\n\t * @return {MMDPhysics}\n\t */\n\treset() {\n\n\t\tfor ( let i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies[ i ].reset();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Warm ups Rigid bodies. Calculates cycles steps.\n\t *\n\t * @param {Integer} cycles\n\t * @return {MMDPhysics}\n\t */\n\twarmup( cycles ) {\n\n\t\tfor ( let i = 0; i < cycles; i ++ ) {\n\n\t\t\tthis.update( 1 / 60 );\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Sets gravity.\n\t *\n\t * @param {Vector3} gravity\n\t * @return {MMDPhysicsHelper}\n\t */\n\tsetGravity( gravity ) {\n\n\t\tthis.world.setGravity( new Ammo.btVector3( gravity.x, gravity.y, gravity.z ) );\n\t\tthis.gravity.copy( gravity );\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Creates MMDPhysicsHelper\n\t *\n\t * @return {MMDPhysicsHelper}\n\t */\n\tcreateHelper() {\n\n\t\treturn new MMDPhysicsHelper( this.mesh, this );\n\n\t}\n\n\t// private methods\n\n\t_init( mesh, rigidBodyParams, constraintParams ) {\n\n\t\tconst manager = this.manager;\n\n\t\t// rigid body/constraint parameters are for\n\t\t// mesh's default world transform as position(0, 0, 0),\n\t\t// quaternion(0, 0, 0, 1) and scale(0, 0, 0)\n\n\t\tconst parent = mesh.parent;\n\n\t\tif ( parent !== null ) mesh.parent = null;\n\n\t\tconst currentPosition = manager.allocThreeVector3();\n\t\tconst currentQuaternion = manager.allocThreeQuaternion();\n\t\tconst currentScale = manager.allocThreeVector3();\n\n\t\tcurrentPosition.copy( mesh.position );\n\t\tcurrentQuaternion.copy( mesh.quaternion );\n\t\tcurrentScale.copy( mesh.scale );\n\n\t\tmesh.position.set( 0, 0, 0 );\n\t\tmesh.quaternion.set( 0, 0, 0, 1 );\n\t\tmesh.scale.set( 1, 1, 1 );\n\n\t\tmesh.updateMatrixWorld( true );\n\n\t\tif ( this.world === null ) {\n\n\t\t\tthis.world = this._createWorld();\n\t\t\tthis.setGravity( this.gravity );\n\n\t\t}\n\n\t\tthis._initRigidBodies( rigidBodyParams );\n\t\tthis._initConstraints( constraintParams );\n\n\t\tif ( parent !== null ) mesh.parent = parent;\n\n\t\tmesh.position.copy( currentPosition );\n\t\tmesh.quaternion.copy( currentQuaternion );\n\t\tmesh.scale.copy( currentScale );\n\n\t\tmesh.updateMatrixWorld( true );\n\n\t\tthis.reset();\n\n\t\tmanager.freeThreeVector3( currentPosition );\n\t\tmanager.freeThreeQuaternion( currentQuaternion );\n\t\tmanager.freeThreeVector3( currentScale );\n\n\t}\n\n\t_createWorld() {\n\n\t\tconst config = new Ammo.btDefaultCollisionConfiguration();\n\t\tconst dispatcher = new Ammo.btCollisionDispatcher( config );\n\t\tconst cache = new Ammo.btDbvtBroadphase();\n\t\tconst solver = new Ammo.btSequentialImpulseConstraintSolver();\n\t\tconst world = new Ammo.btDiscreteDynamicsWorld( dispatcher, cache, solver, config );\n\t\treturn world;\n\n\t}\n\n\t_initRigidBodies( rigidBodies ) {\n\n\t\tfor ( let i = 0, il = rigidBodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies.push( new RigidBody(\n\t\t\t\tthis.mesh, this.world, rigidBodies[ i ], this.manager ) );\n\n\t\t}\n\n\t}\n\n\t_initConstraints( constraints ) {\n\n\t\tfor ( let i = 0, il = constraints.length; i < il; i ++ ) {\n\n\t\t\tconst params = constraints[ i ];\n\t\t\tconst bodyA = this.bodies[ params.rigidBodyIndex1 ];\n\t\t\tconst bodyB = this.bodies[ params.rigidBodyIndex2 ];\n\t\t\tthis.constraints.push( new Constraint( this.mesh, this.world, bodyA, bodyB, params, this.manager ) );\n\n\t\t}\n\n\t}\n\n\t_stepSimulation( delta ) {\n\n\t\tconst unitStep = this.unitStep;\n\t\tlet stepTime = delta;\n\t\tlet maxStepNum = ( ( delta / unitStep ) | 0 ) + 1;\n\n\t\tif ( stepTime < unitStep ) {\n\n\t\t\tstepTime = unitStep;\n\t\t\tmaxStepNum = 1;\n\n\t\t}\n\n\t\tif ( maxStepNum > this.maxStepNum ) {\n\n\t\t\tmaxStepNum = this.maxStepNum;\n\n\t\t}\n\n\t\tthis.world.stepSimulation( stepTime, maxStepNum, unitStep );\n\n\t}\n\n\t_updateRigidBodies() {\n\n\t\tfor ( let i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies[ i ].updateFromBone();\n\n\t\t}\n\n\t}\n\n\t_updateBones() {\n\n\t\tfor ( let i = 0, il = this.bodies.length; i < il; i ++ ) {\n\n\t\t\tthis.bodies[ i ].updateBone();\n\n\t\t}\n\n\t}\n\n}\n\n/**\n * This manager's responsibilies are\n *\n * 1. manage Ammo.js and Three.js object resources and\n *    improve the performance and the memory consumption by\n *    reusing objects.\n *\n * 2. provide simple Ammo object operations.\n */\nclass ResourceManager {\n\n\tconstructor() {\n\n\t\t// for Three.js\n\t\tthis.threeVector3s = [];\n\t\tthis.threeMatrix4s = [];\n\t\tthis.threeQuaternions = [];\n\t\tthis.threeEulers = [];\n\n\t\t// for Ammo.js\n\t\tthis.transforms = [];\n\t\tthis.quaternions = [];\n\t\tthis.vector3s = [];\n\n\t}\n\n\tallocThreeVector3() {\n\n\t\treturn ( this.threeVector3s.length > 0 )\n\t\t\t? this.threeVector3s.pop()\n\t\t\t: new Vector3();\n\n\t}\n\n\tfreeThreeVector3( v ) {\n\n\t\tthis.threeVector3s.push( v );\n\n\t}\n\n\tallocThreeMatrix4() {\n\n\t\treturn ( this.threeMatrix4s.length > 0 )\n\t\t\t? this.threeMatrix4s.pop()\n\t\t\t: new Matrix4();\n\n\t}\n\n\tfreeThreeMatrix4( m ) {\n\n\t\tthis.threeMatrix4s.push( m );\n\n\t}\n\n\tallocThreeQuaternion() {\n\n\t\treturn ( this.threeQuaternions.length > 0 )\n\t\t\t? this.threeQuaternions.pop()\n\t\t\t: new Quaternion();\n\n\t}\n\n\tfreeThreeQuaternion( q ) {\n\n\t\tthis.threeQuaternions.push( q );\n\n\t}\n\n\tallocThreeEuler() {\n\n\t\treturn ( this.threeEulers.length > 0 )\n\t\t\t? this.threeEulers.pop()\n\t\t\t: new Euler();\n\n\t}\n\n\tfreeThreeEuler( e ) {\n\n\t\tthis.threeEulers.push( e );\n\n\t}\n\n\tallocTransform() {\n\n\t\treturn ( this.transforms.length > 0 )\n\t\t\t? this.transforms.pop()\n\t\t\t: new Ammo.btTransform();\n\n\t}\n\n\tfreeTransform( t ) {\n\n\t\tthis.transforms.push( t );\n\n\t}\n\n\tallocQuaternion() {\n\n\t\treturn ( this.quaternions.length > 0 )\n\t\t\t? this.quaternions.pop()\n\t\t\t: new Ammo.btQuaternion();\n\n\t}\n\n\tfreeQuaternion( q ) {\n\n\t\tthis.quaternions.push( q );\n\n\t}\n\n\tallocVector3() {\n\n\t\treturn ( this.vector3s.length > 0 )\n\t\t\t? this.vector3s.pop()\n\t\t\t: new Ammo.btVector3();\n\n\t}\n\n\tfreeVector3( v ) {\n\n\t\tthis.vector3s.push( v );\n\n\t}\n\n\tsetIdentity( t ) {\n\n\t\tt.setIdentity();\n\n\t}\n\n\tgetBasis( t ) {\n\n\t\tvar q = this.allocQuaternion();\n\t\tt.getBasis().getRotation( q );\n\t\treturn q;\n\n\t}\n\n\tgetBasisAsMatrix3( t ) {\n\n\t\tvar q = this.getBasis( t );\n\t\tvar m = this.quaternionToMatrix3( q );\n\t\tthis.freeQuaternion( q );\n\t\treturn m;\n\n\t}\n\n\tgetOrigin( t ) {\n\n\t\treturn t.getOrigin();\n\n\t}\n\n\tsetOrigin( t, v ) {\n\n\t\tt.getOrigin().setValue( v.x(), v.y(), v.z() );\n\n\t}\n\n\tcopyOrigin( t1, t2 ) {\n\n\t\tvar o = t2.getOrigin();\n\t\tthis.setOrigin( t1, o );\n\n\t}\n\n\tsetBasis( t, q ) {\n\n\t\tt.setRotation( q );\n\n\t}\n\n\tsetBasisFromMatrix3( t, m ) {\n\n\t\tvar q = this.matrix3ToQuaternion( m );\n\t\tthis.setBasis( t, q );\n\t\tthis.freeQuaternion( q );\n\n\t}\n\n\tsetOriginFromArray3( t, a ) {\n\n\t\tt.getOrigin().setValue( a[ 0 ], a[ 1 ], a[ 2 ] );\n\n\t}\n\n\tsetOriginFromThreeVector3( t, v ) {\n\n\t\tt.getOrigin().setValue( v.x, v.y, v.z );\n\n\t}\n\n\tsetBasisFromArray3( t, a ) {\n\n\t\tvar thQ = this.allocThreeQuaternion();\n\t\tvar thE = this.allocThreeEuler();\n\t\tthE.set( a[ 0 ], a[ 1 ], a[ 2 ] );\n\t\tthis.setBasisFromThreeQuaternion( t, thQ.setFromEuler( thE ) );\n\n\t\tthis.freeThreeEuler( thE );\n\t\tthis.freeThreeQuaternion( thQ );\n\n\t}\n\n\tsetBasisFromThreeQuaternion( t, a ) {\n\n\t\tvar q = this.allocQuaternion();\n\n\t\tq.setX( a.x );\n\t\tq.setY( a.y );\n\t\tq.setZ( a.z );\n\t\tq.setW( a.w );\n\t\tthis.setBasis( t, q );\n\n\t\tthis.freeQuaternion( q );\n\n\t}\n\n\tmultiplyTransforms( t1, t2 ) {\n\n\t\tvar t = this.allocTransform();\n\t\tthis.setIdentity( t );\n\n\t\tvar m1 = this.getBasisAsMatrix3( t1 );\n\t\tvar m2 = this.getBasisAsMatrix3( t2 );\n\n\t\tvar o1 = this.getOrigin( t1 );\n\t\tvar o2 = this.getOrigin( t2 );\n\n\t\tvar v1 = this.multiplyMatrix3ByVector3( m1, o2 );\n\t\tvar v2 = this.addVector3( v1, o1 );\n\t\tthis.setOrigin( t, v2 );\n\n\t\tvar m3 = this.multiplyMatrices3( m1, m2 );\n\t\tthis.setBasisFromMatrix3( t, m3 );\n\n\t\tthis.freeVector3( v1 );\n\t\tthis.freeVector3( v2 );\n\n\t\treturn t;\n\n\t}\n\n\tinverseTransform( t ) {\n\n\t\tvar t2 = this.allocTransform();\n\n\t\tvar m1 = this.getBasisAsMatrix3( t );\n\t\tvar o = this.getOrigin( t );\n\n\t\tvar m2 = this.transposeMatrix3( m1 );\n\t\tvar v1 = this.negativeVector3( o );\n\t\tvar v2 = this.multiplyMatrix3ByVector3( m2, v1 );\n\n\t\tthis.setOrigin( t2, v2 );\n\t\tthis.setBasisFromMatrix3( t2, m2 );\n\n\t\tthis.freeVector3( v1 );\n\t\tthis.freeVector3( v2 );\n\n\t\treturn t2;\n\n\t}\n\n\tmultiplyMatrices3( m1, m2 ) {\n\n\t\tvar m3 = [];\n\n\t\tvar v10 = this.rowOfMatrix3( m1, 0 );\n\t\tvar v11 = this.rowOfMatrix3( m1, 1 );\n\t\tvar v12 = this.rowOfMatrix3( m1, 2 );\n\n\t\tvar v20 = this.columnOfMatrix3( m2, 0 );\n\t\tvar v21 = this.columnOfMatrix3( m2, 1 );\n\t\tvar v22 = this.columnOfMatrix3( m2, 2 );\n\n\t\tm3[ 0 ] = this.dotVectors3( v10, v20 );\n\t\tm3[ 1 ] = this.dotVectors3( v10, v21 );\n\t\tm3[ 2 ] = this.dotVectors3( v10, v22 );\n\t\tm3[ 3 ] = this.dotVectors3( v11, v20 );\n\t\tm3[ 4 ] = this.dotVectors3( v11, v21 );\n\t\tm3[ 5 ] = this.dotVectors3( v11, v22 );\n\t\tm3[ 6 ] = this.dotVectors3( v12, v20 );\n\t\tm3[ 7 ] = this.dotVectors3( v12, v21 );\n\t\tm3[ 8 ] = this.dotVectors3( v12, v22 );\n\n\t\tthis.freeVector3( v10 );\n\t\tthis.freeVector3( v11 );\n\t\tthis.freeVector3( v12 );\n\t\tthis.freeVector3( v20 );\n\t\tthis.freeVector3( v21 );\n\t\tthis.freeVector3( v22 );\n\n\t\treturn m3;\n\n\t}\n\n\taddVector3( v1, v2 ) {\n\n\t\tvar v = this.allocVector3();\n\t\tv.setValue( v1.x() + v2.x(), v1.y() + v2.y(), v1.z() + v2.z() );\n\t\treturn v;\n\n\t}\n\n\tdotVectors3( v1, v2 ) {\n\n\t\treturn v1.x() * v2.x() + v1.y() * v2.y() + v1.z() * v2.z();\n\n\t}\n\n\trowOfMatrix3( m, i ) {\n\n\t\tvar v = this.allocVector3();\n\t\tv.setValue( m[ i * 3 + 0 ], m[ i * 3 + 1 ], m[ i * 3 + 2 ] );\n\t\treturn v;\n\n\t}\n\n\tcolumnOfMatrix3( m, i ) {\n\n\t\tvar v = this.allocVector3();\n\t\tv.setValue( m[ i + 0 ], m[ i + 3 ], m[ i + 6 ] );\n\t\treturn v;\n\n\t}\n\n\tnegativeVector3( v ) {\n\n\t\tvar v2 = this.allocVector3();\n\t\tv2.setValue( - v.x(), - v.y(), - v.z() );\n\t\treturn v2;\n\n\t}\n\n\tmultiplyMatrix3ByVector3( m, v ) {\n\n\t\tvar v4 = this.allocVector3();\n\n\t\tvar v0 = this.rowOfMatrix3( m, 0 );\n\t\tvar v1 = this.rowOfMatrix3( m, 1 );\n\t\tvar v2 = this.rowOfMatrix3( m, 2 );\n\t\tvar x = this.dotVectors3( v0, v );\n\t\tvar y = this.dotVectors3( v1, v );\n\t\tvar z = this.dotVectors3( v2, v );\n\n\t\tv4.setValue( x, y, z );\n\n\t\tthis.freeVector3( v0 );\n\t\tthis.freeVector3( v1 );\n\t\tthis.freeVector3( v2 );\n\n\t\treturn v4;\n\n\t}\n\n\ttransposeMatrix3( m ) {\n\n\t\tvar m2 = [];\n\t\tm2[ 0 ] = m[ 0 ];\n\t\tm2[ 1 ] = m[ 3 ];\n\t\tm2[ 2 ] = m[ 6 ];\n\t\tm2[ 3 ] = m[ 1 ];\n\t\tm2[ 4 ] = m[ 4 ];\n\t\tm2[ 5 ] = m[ 7 ];\n\t\tm2[ 6 ] = m[ 2 ];\n\t\tm2[ 7 ] = m[ 5 ];\n\t\tm2[ 8 ] = m[ 8 ];\n\t\treturn m2;\n\n\t}\n\n\tquaternionToMatrix3( q ) {\n\n\t\tvar m = [];\n\n\t\tvar x = q.x();\n\t\tvar y = q.y();\n\t\tvar z = q.z();\n\t\tvar w = q.w();\n\n\t\tvar xx = x * x;\n\t\tvar yy = y * y;\n\t\tvar zz = z * z;\n\n\t\tvar xy = x * y;\n\t\tvar yz = y * z;\n\t\tvar zx = z * x;\n\n\t\tvar xw = x * w;\n\t\tvar yw = y * w;\n\t\tvar zw = z * w;\n\n\t\tm[ 0 ] = 1 - 2 * ( yy + zz );\n\t\tm[ 1 ] = 2 * ( xy - zw );\n\t\tm[ 2 ] = 2 * ( zx + yw );\n\t\tm[ 3 ] = 2 * ( xy + zw );\n\t\tm[ 4 ] = 1 - 2 * ( zz + xx );\n\t\tm[ 5 ] = 2 * ( yz - xw );\n\t\tm[ 6 ] = 2 * ( zx - yw );\n\t\tm[ 7 ] = 2 * ( yz + xw );\n\t\tm[ 8 ] = 1 - 2 * ( xx + yy );\n\n\t\treturn m;\n\n\t}\n\n\tmatrix3ToQuaternion( m ) {\n\n\t\tvar t = m[ 0 ] + m[ 4 ] + m[ 8 ];\n\t\tvar s, x, y, z, w;\n\n\t\tif ( t > 0 ) {\n\n\t\t\ts = Math.sqrt( t + 1.0 ) * 2;\n\t\t\tw = 0.25 * s;\n\t\t\tx = ( m[ 7 ] - m[ 5 ] ) / s;\n\t\t\ty = ( m[ 2 ] - m[ 6 ] ) / s;\n\t\t\tz = ( m[ 3 ] - m[ 1 ] ) / s;\n\n\t\t} else if ( ( m[ 0 ] > m[ 4 ] ) && ( m[ 0 ] > m[ 8 ] ) ) {\n\n\t\t\ts = Math.sqrt( 1.0 + m[ 0 ] - m[ 4 ] - m[ 8 ] ) * 2;\n\t\t\tw = ( m[ 7 ] - m[ 5 ] ) / s;\n\t\t\tx = 0.25 * s;\n\t\t\ty = ( m[ 1 ] + m[ 3 ] ) / s;\n\t\t\tz = ( m[ 2 ] + m[ 6 ] ) / s;\n\n\t\t} else if ( m[ 4 ] > m[ 8 ] ) {\n\n\t\t\ts = Math.sqrt( 1.0 + m[ 4 ] - m[ 0 ] - m[ 8 ] ) * 2;\n\t\t\tw = ( m[ 2 ] - m[ 6 ] ) / s;\n\t\t\tx = ( m[ 1 ] + m[ 3 ] ) / s;\n\t\t\ty = 0.25 * s;\n\t\t\tz = ( m[ 5 ] + m[ 7 ] ) / s;\n\n\t\t} else {\n\n\t\t\ts = Math.sqrt( 1.0 + m[ 8 ] - m[ 0 ] - m[ 4 ] ) * 2;\n\t\t\tw = ( m[ 3 ] - m[ 1 ] ) / s;\n\t\t\tx = ( m[ 2 ] + m[ 6 ] ) / s;\n\t\t\ty = ( m[ 5 ] + m[ 7 ] ) / s;\n\t\t\tz = 0.25 * s;\n\n\t\t}\n\n\t\tvar q = this.allocQuaternion();\n\t\tq.setX( x );\n\t\tq.setY( y );\n\t\tq.setZ( z );\n\t\tq.setW( w );\n\t\treturn q;\n\n\t}\n\n}\n\n/**\n * @param {THREE.SkinnedMesh} mesh\n * @param {Ammo.btDiscreteDynamicsWorld} world\n * @param {Object} params\n * @param {ResourceManager} manager\n */\nclass RigidBody {\n\n\tconstructor( mesh, world, params, manager ) {\n\n\t\tthis.mesh = mesh;\n\t\tthis.world = world;\n\t\tthis.params = params;\n\t\tthis.manager = manager;\n\n\t\tthis.body = null;\n\t\tthis.bone = null;\n\t\tthis.boneOffsetForm = null;\n\t\tthis.boneOffsetFormInverse = null;\n\n\t\tthis._init();\n\n\t}\n\n\t/**\n\t * Resets rigid body transform to the current bone's.\n\t *\n\t * @return {RigidBody}\n\t */\n\treset() {\n\n\t\tthis._setTransformFromBone();\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates rigid body's transform from the current bone.\n\t *\n\t * @return {RidigBody}\n\t */\n\tupdateFromBone() {\n\n\t\tif ( this.params.boneIndex !== - 1 && this.params.type === 0 ) {\n\n\t\t\tthis._setTransformFromBone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t/**\n\t * Updates bone from the current ridid body's transform.\n\t *\n\t * @return {RidigBody}\n\t */\n\tupdateBone() {\n\n\t\tif ( this.params.type === 0 || this.params.boneIndex === - 1 ) {\n\n\t\t\treturn this;\n\n\t\t}\n\n\t\tthis._updateBoneRotation();\n\n\t\tif ( this.params.type === 1 ) {\n\n\t\t\tthis._updateBonePosition();\n\n\t\t}\n\n\t\tthis.bone.updateMatrixWorld( true );\n\n\t\tif ( this.params.type === 2 ) {\n\n\t\t\tthis._setPositionFromBone();\n\n\t\t}\n\n\t\treturn this;\n\n\t}\n\n\t// private methods\n\n\t_init() {\n\n\t\tfunction generateShape( p ) {\n\n\t\t\tswitch ( p.shapeType ) {\n\n\t\t\t\tcase 0:\n\t\t\t\t\treturn new Ammo.btSphereShape( p.width );\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn new Ammo.btBoxShape( new Ammo.btVector3( p.width, p.height, p.depth ) );\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn new Ammo.btCapsuleShape( p.width, p.height );\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error( 'unknown shape type ' + p.shapeType );\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst manager = this.manager;\n\t\tconst params = this.params;\n\t\tconst bones = this.mesh.skeleton.bones;\n\t\tconst bone = ( params.boneIndex === - 1 )\n\t\t\t? new Bone()\n\t\t\t: bones[ params.boneIndex ];\n\n\t\tconst shape = generateShape( params );\n\t\tconst weight = ( params.type === 0 ) ? 0 : params.weight;\n\t\tconst localInertia = manager.allocVector3();\n\t\tlocalInertia.setValue( 0, 0, 0 );\n\n\t\tif ( weight !== 0 ) {\n\n\t\t\tshape.calculateLocalInertia( weight, localInertia );\n\n\t\t}\n\n\t\tconst boneOffsetForm = manager.allocTransform();\n\t\tmanager.setIdentity( boneOffsetForm );\n\t\tmanager.setOriginFromArray3( boneOffsetForm, params.position );\n\t\tmanager.setBasisFromArray3( boneOffsetForm, params.rotation );\n\n\t\tconst vector = manager.allocThreeVector3();\n\t\tconst boneForm = manager.allocTransform();\n\t\tmanager.setIdentity( boneForm );\n\t\tmanager.setOriginFromThreeVector3( boneForm, bone.getWorldPosition( vector ) );\n\n\t\tconst form = manager.multiplyTransforms( boneForm, boneOffsetForm );\n\t\tconst state = new Ammo.btDefaultMotionState( form );\n\n\t\tconst info = new Ammo.btRigidBodyConstructionInfo( weight, state, shape, localInertia );\n\t\tinfo.set_m_friction( params.friction );\n\t\tinfo.set_m_restitution( params.restitution );\n\n\t\tconst body = new Ammo.btRigidBody( info );\n\n\t\tif ( params.type === 0 ) {\n\n\t\t\tbody.setCollisionFlags( body.getCollisionFlags() | 2 );\n\n\t\t\t/*\n\t\t\t * It'd be better to comment out this line though in general I should call this method\n\t\t\t * because I'm not sure why but physics will be more like MMD's\n\t\t\t * if I comment out.\n\t\t\t */\n\t\t\tbody.setActivationState( 4 );\n\n\t\t}\n\n\t\tbody.setDamping( params.positionDamping, params.rotationDamping );\n\t\tbody.setSleepingThresholds( 0, 0 );\n\n\t\tthis.world.addRigidBody( body, 1 << params.groupIndex, params.groupTarget );\n\n\t\tthis.body = body;\n\t\tthis.bone = bone;\n\t\tthis.boneOffsetForm = boneOffsetForm;\n\t\tthis.boneOffsetFormInverse = manager.inverseTransform( boneOffsetForm );\n\n\t\tmanager.freeVector3( localInertia );\n\t\tmanager.freeTransform( form );\n\t\tmanager.freeTransform( boneForm );\n\t\tmanager.freeThreeVector3( vector );\n\n\t}\n\n\t_getBoneTransform() {\n\n\t\tconst manager = this.manager;\n\t\tconst p = manager.allocThreeVector3();\n\t\tconst q = manager.allocThreeQuaternion();\n\t\tconst s = manager.allocThreeVector3();\n\n\t\tthis.bone.matrixWorld.decompose( p, q, s );\n\n\t\tconst tr = manager.allocTransform();\n\t\tmanager.setOriginFromThreeVector3( tr, p );\n\t\tmanager.setBasisFromThreeQuaternion( tr, q );\n\n\t\tconst form = manager.multiplyTransforms( tr, this.boneOffsetForm );\n\n\t\tmanager.freeTransform( tr );\n\t\tmanager.freeThreeVector3( s );\n\t\tmanager.freeThreeQuaternion( q );\n\t\tmanager.freeThreeVector3( p );\n\n\t\treturn form;\n\n\t}\n\n\t_getWorldTransformForBone() {\n\n\t\tconst manager = this.manager;\n\t\tconst tr = this.body.getCenterOfMassTransform();\n\t\treturn manager.multiplyTransforms( tr, this.boneOffsetFormInverse );\n\n\t}\n\n\t_setTransformFromBone() {\n\n\t\tconst manager = this.manager;\n\t\tconst form = this._getBoneTransform();\n\n\t\t// TODO: check the most appropriate way to set\n\t\t//this.body.setWorldTransform( form );\n\t\tthis.body.setCenterOfMassTransform( form );\n\t\tthis.body.getMotionState().setWorldTransform( form );\n\n\t\tmanager.freeTransform( form );\n\n\t}\n\n\t_setPositionFromBone() {\n\n\t\tconst manager = this.manager;\n\t\tconst form = this._getBoneTransform();\n\n\t\tconst tr = manager.allocTransform();\n\t\tthis.body.getMotionState().getWorldTransform( tr );\n\t\tmanager.copyOrigin( tr, form );\n\n\t\t// TODO: check the most appropriate way to set\n\t\t//this.body.setWorldTransform( tr );\n\t\tthis.body.setCenterOfMassTransform( tr );\n\t\tthis.body.getMotionState().setWorldTransform( tr );\n\n\t\tmanager.freeTransform( tr );\n\t\tmanager.freeTransform( form );\n\n\t}\n\n\t_updateBoneRotation() {\n\n\t\tconst manager = this.manager;\n\n\t\tconst tr = this._getWorldTransformForBone();\n\t\tconst q = manager.getBasis( tr );\n\n\t\tconst thQ = manager.allocThreeQuaternion();\n\t\tconst thQ2 = manager.allocThreeQuaternion();\n\t\tconst thQ3 = manager.allocThreeQuaternion();\n\n\t\tthQ.set( q.x(), q.y(), q.z(), q.w() );\n\t\tthQ2.setFromRotationMatrix( this.bone.matrixWorld );\n\t\tthQ2.conjugate();\n\t\tthQ2.multiply( thQ );\n\n\t\t//this.bone.quaternion.multiply( thQ2 );\n\n\t\tthQ3.setFromRotationMatrix( this.bone.matrix );\n\n\t\t// Renormalizing quaternion here because repeatedly transforming\n\t\t// quaternion continuously accumulates floating point error and\n\t\t// can end up being overflow. See #15335\n\t\tthis.bone.quaternion.copy( thQ2.multiply( thQ3 ).normalize() );\n\n\t\tmanager.freeThreeQuaternion( thQ );\n\t\tmanager.freeThreeQuaternion( thQ2 );\n\t\tmanager.freeThreeQuaternion( thQ3 );\n\n\t\tmanager.freeQuaternion( q );\n\t\tmanager.freeTransform( tr );\n\n\t}\n\n\t_updateBonePosition() {\n\n\t\tconst manager = this.manager;\n\n\t\tconst tr = this._getWorldTransformForBone();\n\n\t\tconst thV = manager.allocThreeVector3();\n\n\t\tconst o = manager.getOrigin( tr );\n\t\tthV.set( o.x(), o.y(), o.z() );\n\n\t\tif ( this.bone.parent ) {\n\n\t\t\tthis.bone.parent.worldToLocal( thV );\n\n\t\t}\n\n\t\tthis.bone.position.copy( thV );\n\n\t\tmanager.freeThreeVector3( thV );\n\n\t\tmanager.freeTransform( tr );\n\n\t}\n\n}\n\n//\n\nclass Constraint {\n\n\t/**\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Ammo.btDiscreteDynamicsWorld} world\n\t * @param {RigidBody} bodyA\n\t * @param {RigidBody} bodyB\n\t * @param {Object} params\n\t * @param {ResourceManager} manager\n\t */\n\tconstructor( mesh, world, bodyA, bodyB, params, manager ) {\n\n\t\tthis.mesh = mesh;\n\t\tthis.world = world;\n\t\tthis.bodyA = bodyA;\n\t\tthis.bodyB = bodyB;\n\t\tthis.params = params;\n\t\tthis.manager = manager;\n\n\t\tthis.constraint = null;\n\n\t\tthis._init();\n\n\t}\n\n\t// private method\n\n\t_init() {\n\n\t\tconst manager = this.manager;\n\t\tconst params = this.params;\n\t\tconst bodyA = this.bodyA;\n\t\tconst bodyB = this.bodyB;\n\n\t\tconst form = manager.allocTransform();\n\t\tmanager.setIdentity( form );\n\t\tmanager.setOriginFromArray3( form, params.position );\n\t\tmanager.setBasisFromArray3( form, params.rotation );\n\n\t\tconst formA = manager.allocTransform();\n\t\tconst formB = manager.allocTransform();\n\n\t\tbodyA.body.getMotionState().getWorldTransform( formA );\n\t\tbodyB.body.getMotionState().getWorldTransform( formB );\n\n\t\tconst formInverseA = manager.inverseTransform( formA );\n\t\tconst formInverseB = manager.inverseTransform( formB );\n\n\t\tconst formA2 = manager.multiplyTransforms( formInverseA, form );\n\t\tconst formB2 = manager.multiplyTransforms( formInverseB, form );\n\n\t\tconst constraint = new Ammo.btGeneric6DofSpringConstraint( bodyA.body, bodyB.body, formA2, formB2, true );\n\n\t\tconst lll = manager.allocVector3();\n\t\tconst lul = manager.allocVector3();\n\t\tconst all = manager.allocVector3();\n\t\tconst aul = manager.allocVector3();\n\n\t\tlll.setValue( params.translationLimitation1[ 0 ],\n\t\t              params.translationLimitation1[ 1 ],\n\t\t              params.translationLimitation1[ 2 ] );\n\t\tlul.setValue( params.translationLimitation2[ 0 ],\n\t\t              params.translationLimitation2[ 1 ],\n\t\t              params.translationLimitation2[ 2 ] );\n\t\tall.setValue( params.rotationLimitation1[ 0 ],\n\t\t              params.rotationLimitation1[ 1 ],\n\t\t              params.rotationLimitation1[ 2 ] );\n\t\taul.setValue( params.rotationLimitation2[ 0 ],\n\t\t              params.rotationLimitation2[ 1 ],\n\t\t              params.rotationLimitation2[ 2 ] );\n\n\t\tconstraint.setLinearLowerLimit( lll );\n\t\tconstraint.setLinearUpperLimit( lul );\n\t\tconstraint.setAngularLowerLimit( all );\n\t\tconstraint.setAngularUpperLimit( aul );\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tif ( params.springPosition[ i ] !== 0 ) {\n\n\t\t\t\tconstraint.enableSpring( i, true );\n\t\t\t\tconstraint.setStiffness( i, params.springPosition[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\tif ( params.springRotation[ i ] !== 0 ) {\n\n\t\t\t\tconstraint.enableSpring( i + 3, true );\n\t\t\t\tconstraint.setStiffness( i + 3, params.springRotation[ i ] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t/*\n\t\t * Currently(10/31/2016) official ammo.js doesn't support\n\t\t * btGeneric6DofSpringConstraint.setParam method.\n\t\t * You need custom ammo.js (add the method into idl) if you wanna use.\n\t\t * By setting this parameter, physics will be more like MMD's\n\t\t */\n\t\tif ( constraint.setParam !== undefined ) {\n\n\t\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\t\tconstraint.setParam( 2, 0.475, i );\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.world.addConstraint( constraint, true );\n\t\tthis.constraint = constraint;\n\n\t\tmanager.freeTransform( form );\n\t\tmanager.freeTransform( formA );\n\t\tmanager.freeTransform( formB );\n\t\tmanager.freeTransform( formInverseA );\n\t\tmanager.freeTransform( formInverseB );\n\t\tmanager.freeTransform( formA2 );\n\t\tmanager.freeTransform( formB2 );\n\t\tmanager.freeVector3( lll );\n\t\tmanager.freeVector3( lul );\n\t\tmanager.freeVector3( all );\n\t\tmanager.freeVector3( aul );\n\n\t}\n\n}\n\n//\n\nconst _position = new Vector3();\nconst _quaternion = new Quaternion();\nconst _scale = new Vector3();\nconst _matrixWorldInv = new Matrix4();\n\nclass MMDPhysicsHelper extends Object3D {\n\n\t/**\n\t * Visualize Rigid bodies\n\t *\n\t * @param {THREE.SkinnedMesh} mesh\n\t * @param {Physics} physics\n\t */\n\tconstructor( mesh, physics ) {\n\n\t\tsuper();\n\n\t\tthis.root = mesh;\n\t\tthis.physics = physics;\n\n\t\tthis.matrix.copy( mesh.matrixWorld );\n\t\tthis.matrixAutoUpdate = false;\n\n\t\tthis.materials = [];\n\n\t\tthis.materials.push(\n\t\t\tnew MeshBasicMaterial( {\n\t\t\t\tcolor: new Color( 0xff8888 ),\n\t\t\t\twireframe: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\topacity: 0.25,\n\t\t\t\ttransparent: true\n\t\t\t} )\n\t\t);\n\n\t\tthis.materials.push(\n\t\t\tnew MeshBasicMaterial( {\n\t\t\t\tcolor: new Color( 0x88ff88 ),\n\t\t\t\twireframe: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\topacity: 0.25,\n\t\t\t\ttransparent: true\n\t\t\t} )\n\t\t);\n\n\t\tthis.materials.push(\n\t\t\tnew MeshBasicMaterial( {\n\t\t\t\tcolor: new Color( 0x8888ff ),\n\t\t\t\twireframe: true,\n\t\t\t\tdepthTest: false,\n\t\t\t\tdepthWrite: false,\n\t\t\t\topacity: 0.25,\n\t\t\t\ttransparent: true\n\t\t\t} )\n\t\t);\n\n\t\tthis._init();\n\n\t}\n\n\n\t/**\n\t * Frees the GPU-related resources allocated by this instance. Call this method whenever this instance is no longer used in your app.\n\t */\n\tdispose() {\n\n\t\tconst materials = this.materials;\n\t\tconst children = this.children;\n\n\t\tfor ( let i = 0; i < materials.length; i ++ ) {\n\n\t\t\tmaterials[ i ].dispose();\n\n\t\t}\n\n\t\tfor ( let i = 0; i < children.length; i ++ ) {\n\n\t\t\tconst child = children[ i ];\n\n\t\t\tif ( child.isMesh ) child.geometry.dispose();\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Updates Rigid Bodies visualization.\n\t */\n\tupdateMatrixWorld( force ) {\n\n\t\tvar mesh = this.root;\n\n\t\tif ( this.visible ) {\n\n\t\t\tvar bodies = this.physics.bodies;\n\n\t\t\t_matrixWorldInv\n\t\t\t\t.copy( mesh.matrixWorld )\n\t\t\t\t.decompose( _position, _quaternion, _scale )\n\t\t\t\t.compose( _position, _quaternion, _scale.set( 1, 1, 1 ) )\n\t\t\t\t.invert();\n\n\t\t\tfor ( var i = 0, il = bodies.length; i < il; i ++ ) {\n\n\t\t\t\tvar body = bodies[ i ].body;\n\t\t\t\tvar child = this.children[ i ];\n\n\t\t\t\tvar tr = body.getCenterOfMassTransform();\n\t\t\t\tvar origin = tr.getOrigin();\n\t\t\t\tvar rotation = tr.getRotation();\n\n\t\t\t\tchild.position\n\t\t\t\t\t.set( origin.x(), origin.y(), origin.z() )\n\t\t\t\t\t.applyMatrix4( _matrixWorldInv );\n\n\t\t\t\tchild.quaternion\n\t\t\t\t\t.setFromRotationMatrix( _matrixWorldInv )\n\t\t\t\t\t.multiply(\n\t\t\t\t\t\t_quaternion.set( rotation.x(), rotation.y(), rotation.z(), rotation.w() )\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.matrix\n\t\t\t.copy( mesh.matrixWorld )\n\t\t\t.decompose( _position, _quaternion, _scale )\n\t\t\t.compose( _position, _quaternion, _scale.set( 1, 1, 1 ) );\n\n\t\tsuper.updateMatrixWorld( force );\n\n\t}\n\n\t// private method\n\n\t_init() {\n\n\t\tvar bodies = this.physics.bodies;\n\n\t\tfunction createGeometry( param ) {\n\n\t\t\tswitch ( param.shapeType ) {\n\n\t\t\t\tcase 0:\n\t\t\t\t\treturn new SphereGeometry( param.width, 16, 8 );\n\n\t\t\t\tcase 1:\n\t\t\t\t\treturn new BoxGeometry( param.width * 2, param.height * 2, param.depth * 2, 8, 8, 8 );\n\n\t\t\t\tcase 2:\n\t\t\t\t\treturn new CapsuleGeometry( param.width, param.height, 8, 16 );\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfor ( var i = 0, il = bodies.length; i < il; i ++ ) {\n\n\t\t\tvar param = bodies[ i ].params;\n\t\t\tthis.add( new Mesh( createGeometry( param ), this.materials[ param.type ] ) );\n\n\t\t}\n\n\t}\n\n}\n\nexport { MMDPhysics };\n"],
  "mappings": "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",
  "names": ["param"]
}
